version: "3.9"

# Build the shared base image before starting services:
#   docker build -f services/base/Dockerfile -t sidetrack-base .
services:
  db:
    image: timescale/timescaledb:latest-pg16
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports: ["8000:8000"]

  extractor:
    build:
      context: .
      dockerfile: services/extractor/Dockerfile
    env_file: .env
    volumes:
      - ./data/audio:/audio:ro
    depends_on:
      db:
        condition: service_healthy
    command: python -m sidetrack.extractor.run --schedule "@daily"

  scheduler:
    build:
      context: .
      dockerfile: services/scheduler/Dockerfile
    env_file: .env
    depends_on:
      api:
        condition: service_started
      extractor:
        condition: service_started
    # use image CMD

  worker:
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    env_file: .env
    depends_on:
      cache:
        condition: service_healthy
      db:
        condition: service_healthy
    command: python -m sidetrack.worker.run

  ui:
    build: ./services/ui
    env_file: .env
    depends_on: [api]
    ports: ["3000:3000"]

  proxy:
    image: caddy:2
    ports: ["80:80", "443:443"]
    volumes:
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [ui]

volumes:
  db_data:
  caddy_data:
  caddy_config:
